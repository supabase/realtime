name: Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  release:
    name: Release

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      # No easy way to check whether or not semantic-release released a new
      # version, so we use artifacts as a workaround
      - name: Get version before
        run: echo $(curl --silent https://api.github.com/repos/supabase/realtime/releases/latest | jq .name --raw-output | cut -c 2-) > version-before

      - uses: actions/upload-artifact@v2
        with:
          name: version-before
          path: version-before

      - name: Release on GitHub
        run: |
          npx semantic-release --plugins              \
            @semantic-release/commit-analyzer         \
            @semantic-release/release-notes-generator \
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # TODO: Race condition: GitHub may not update releases just in time before
      # this step is invoked. Very unlikely to happen.
      - name: Get version after
        run: echo $(curl --silent https://api.github.com/repos/supabase/realtime/releases/latest | jq .name --raw-output | cut -c 2-) > version-after

      - uses: actions/upload-artifact@v2
        with:
          name: version-after
          path: version-after

  upload-x86_64:
    name: Upload / Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }}

    needs:
      - release

    strategy:
      matrix:
        elixir: [1.11.x]
        otp: [23.x]

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/download-artifact@v2

      - name: Check for new release
        run: |
          echo VERSION_BEFORE=$(cat version-before/version-before) >> $GITHUB_ENV
          echo VERSION_AFTER=$(cat version-after/version-after) >> $GITHUB_ENV

      # No easy way to conditionally skip steps, so we use `if` as a workaround
      - uses: actions/checkout@v2
        if: env.VERSION_BEFORE != env.VERSION_AFTER

      - name: Cache Mix
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Set up Elixir
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Prepare release
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        run: |
          cd server
          sed -i "s/@version \".*\"/@version \"${{ env.VERSION_AFTER }}\"/" mix.exs
          mix deps.get
          mix compile
          mix release
          tar -czf ../realtime-v${{ env.VERSION_AFTER }}-x86_64-linux-gnu.tar.gz -C ./_build/prod/rel realtime
        env:
          MIX_ENV: prod

      - name: Get upload url
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        run: echo UPLOAD_URL=$(curl --silent https://api.github.com/repos/supabase/realtime/releases/latest | jq .upload_url --raw-output) >> $GITHUB_ENV

      - name: Upload release asset
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./realtime-v${{ env.VERSION_AFTER }}-x86_64-linux-gnu.tar.gz
          asset_name: realtime-v${{ env.VERSION_AFTER }}-x86_64-linux-gnu.tar.gz
          asset_content_type: application/gzip

  upload-aarch64:
    name: Build and upload arm64 binaries

    needs:
      - release

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/download-artifact@v2

      - name: Check for new release
        run: |
          echo VERSION_BEFORE=$(cat version-before/version-before) >> $GITHUB_ENV
          echo VERSION_AFTER=$(cat version-after/version-after) >> $GITHUB_ENV

      - uses: actions/checkout@v2
        if: env.VERSION_BEFORE != env.VERSION_AFTER

      - uses: uraimo/run-on-arch-action@v2.0.5
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        name: Build realtime for aarch64
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04

          run: |
            export DEBIAN_FRONTEND=noninteractive
            export MIX_ENV=prod
            export LANG=C.UTF-8

            apt-get update
            apt-get -y install --no-install-recommends wget gnupg ca-certificates
            wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb
            dpkg -i erlang-solutions_2.0_all.deb
            apt-get update
            apt-get -y install --no-install-recommends esl-erlang=1:22.3.4.9-1 elixir=1.10.4-1

            cd server
            sed -i "s/@version \".*\"/@version \"${{ env.VERSION_AFTER }}\"/" mix.exs
            mix local.hex --force
            mix local.rebar --force
            mix deps.get
            mix deps.compile
            mix release
            tar -czf ../realtime-v${{ env.VERSION_AFTER }}-aarch64-linux-gnu.tar.gz -C ./_build/prod/rel realtime

      - name: Get upload url
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        run: echo UPLOAD_URL=$(curl --silent https://api.github.com/repos/supabase/realtime/releases/latest | jq .upload_url --raw-output) >> $GITHUB_ENV

      - name: Upload release asset
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./realtime-v${{ env.VERSION_AFTER }}-aarch64-linux-gnu.tar.gz
          asset_name: realtime-v${{ env.VERSION_AFTER }}-aarch64-linux-gnu.tar.gz
          asset_content_type: application/gzip

  upload-docker:
    name: Upload Docker image

    needs:
      - release

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/download-artifact@v2

      - name: Check for new release
        run: |
          echo VERSION_BEFORE=$(cat version-before/version-before) >> $GITHUB_ENV
          echo VERSION_AFTER=$(cat version-after/version-after) >> $GITHUB_ENV

      - uses: actions/checkout@v2
        if: env.VERSION_BEFORE != env.VERSION_AFTER

      - name: Set up QEMU
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Upload build to Docker Hub
        if: env.VERSION_BEFORE != env.VERSION_AFTER
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: supabase/realtime:latest,supabase/realtime:v${{ env.VERSION_AFTER }}
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
