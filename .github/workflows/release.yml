name: Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  release:
    name: Release
    runs-on: ubuntu-18.04
    outputs:
      published: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v3
      - id: semantic-release
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 18
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-x86_64:
    name: Upload / Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }}
    needs:
      - release
    strategy:
      matrix:
        elixir: [1.11.x]
        otp: [23.x]
    runs-on: ubuntu-18.04
    if: needs.release.outputs.published == 'true'
    steps:
      - uses: actions/checkout@v3

      - name: Cache Mix
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Prepare release
        run: |
          cd server
          sed -i "s/@version \".*\"/@version \"${{ steps.semantic.outputs.new_release_version }}\"/" mix.exs
          mix deps.get
          mix compile
          mix release
          tar -czf ../realtime-v${{ steps.semantic.outputs.new_release_version }}-x86_64-linux-gnu.tar.gz -C ./_build/prod/rel realtime
        env:
          MIX_ENV: prod

      - name: Get upload url
        run: echo UPLOAD_URL=$(curl --silent https://api.github.com/repos/supabase/realtime/releases/latest | jq .upload_url --raw-output) >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./realtime-v${{ steps.semantic.outputs.new_release_version }}-x86_64-linux-gnu.tar.gz
          asset_name: realtime-v${{ steps.semantic.outputs.new_release_version }}-x86_64-linux-gnu.tar.gz
          asset_content_type: application/gzip

  upload-aarch64:
    name: Build and upload arm64 binaries
    needs:
      - release
    runs-on: ubuntu-18.04
    if: needs.release.outputs.published == 'true'
    steps:
      - uses: actions/checkout@v3

      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build realtime for aarch64
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04

          run: |
            export DEBIAN_FRONTEND=noninteractive
            export MIX_ENV=prod
            export LANG=C.UTF-8

            apt-get update
            apt-get -y install --no-install-recommends wget gnupg ca-certificates
            wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb
            dpkg -i erlang-solutions_2.0_all.deb
            apt-get update
            apt-get -y install --no-install-recommends esl-erlang=1:22.3.4.9-1 elixir=1.10.4-1

            cd server
            sed -i "s/@version \".*\"/@version \"${{ steps.semantic.outputs.new_release_version }}\"/" mix.exs
            mix local.hex --force
            mix local.rebar --force
            mix deps.get
            mix deps.compile
            mix release
            tar -czf ../realtime-v${{ steps.semantic.outputs.new_release_version }}-aarch64-linux-gnu.tar.gz -C ./_build/prod/rel realtime

      - name: Get upload url
        run: echo UPLOAD_URL=$(curl --silent https://api.github.com/repos/supabase/realtime/releases/latest | jq .upload_url --raw-output) >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./realtime-v${{ steps.semantic.outputs.new_release_version }}-aarch64-linux-gnu.tar.gz
          asset_name: realtime-v${{ steps.semantic.outputs.new_release_version }}-aarch64-linux-gnu.tar.gz
          asset_content_type: application/gzip

  upload-docker:
    name: Upload Docker image
    needs:
      - release
    runs-on: ubuntu-latest
    if: needs.release.outputs.published == 'true'
    steps:
      - id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            supabase/realtime
            public.ecr.aws/t3w2s2c9/realtime
          tags: |
            type=raw,value=v${{ steps.semantic.outputs.new_release_version }}

      - uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64,arm64
      - uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ secrets.PROD_ACCESS_KEY_ID }}
          password: ${{ secrets.PROD_SECRET_ACCESS_KEY }}

      - uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
